{
  "Id": "deploymentprocess-Projects-546",
  "ProjectId": "Projects-546",
  "Steps": [
    {
      "Id": "15c7b7c8-2b45-4170-abcf-ff1f6f3429d4",
      "Name": "Deploy PS Module SqlServerDsc",
      "PackageRequirement": "LetOctopusDecide",
      "Properties": {
        "Octopus.Action.TargetRoles": "sql-server"
      },
      "Condition": "Success",
      "StartTrigger": "StartAfterPrevious",
      "Actions": [
        {
          "Id": "43789c74-5cc7-44b9-a49f-32e82fd2cadc",
          "Name": "Deploy PS Module SqlServerDsc",
          "ActionType": "Octopus.TentaclePackage",
          "IsDisabled": false,
          "CanBeUsedForProjectVersioning": true,
          "IsRequired": false,
          "WorkerPoolId": null,
          "Environments": [],
          "ExcludedEnvironments": [],
          "Channels": [],
          "TenantTags": [],
          "Packages": [
            {
              "Id": "11dee656-a3f1-4fbc-aa01-ab34cd2d1f14",
              "Name": "",
              "PackageId": "ps-module-SqlServerDsc",
              "FeedId": "feeds-builtin",
              "AcquisitionLocation": "Server",
              "Properties": {}
            }
          ],
          "Properties": {
            "Octopus.Action.EnabledFeatures": "Octopus.Features.CustomDirectory",
            "Octopus.Action.Package.CustomInstallationDirectory": "C:\\Program Files\\WindowsPowerShell\\Modules\\SqlServerDsc",
            "Octopus.Action.Package.CustomInstallationDirectoryShouldBePurgedBeforeDeployment": "True",
            "Octopus.Action.Package.PackageId": "ps-module-SqlServerDsc",
            "Octopus.Action.Package.FeedId": "feeds-builtin",
            "Octopus.Action.Package.DownloadOnTentacle": "False"
          },
          "Links": {}
        }
      ]
    },
    {
      "Id": "4c387535-3a58-4ae8-a4a7-6536b28c5865",
      "Name": "Deploy PS Module SqlServer",
      "PackageRequirement": "LetOctopusDecide",
      "Properties": {
        "Octopus.Action.TargetRoles": "sql-server"
      },
      "Condition": "Success",
      "StartTrigger": "StartAfterPrevious",
      "Actions": [
        {
          "Id": "f43acee6-8aa1-4316-9817-e287f3c0b40f",
          "Name": "Deploy PS Module SqlServer",
          "ActionType": "Octopus.TentaclePackage",
          "IsDisabled": false,
          "CanBeUsedForProjectVersioning": true,
          "IsRequired": false,
          "WorkerPoolId": null,
          "Environments": [],
          "ExcludedEnvironments": [],
          "Channels": [],
          "TenantTags": [],
          "Packages": [
            {
              "Id": "4b9fa654-66c4-4633-8a75-7145b4134544",
              "Name": "",
              "PackageId": "ps-module-SqlServer",
              "FeedId": "feeds-builtin",
              "AcquisitionLocation": "Server",
              "Properties": {}
            }
          ],
          "Properties": {
            "Octopus.Action.EnabledFeatures": "Octopus.Features.CustomDirectory",
            "Octopus.Action.Package.CustomInstallationDirectory": "C:\\Program Files\\WindowsPowerShell\\Modules\\SqlServer",
            "Octopus.Action.Package.CustomInstallationDirectoryShouldBePurgedBeforeDeployment": "True",
            "Octopus.Action.Package.PackageId": "ps-module-SqlServer",
            "Octopus.Action.Package.FeedId": "feeds-builtin",
            "Octopus.Action.Package.DownloadOnTentacle": "False"
          },
          "Links": {}
        }
      ]
    },
    {
      "Id": "5d081970-f6b9-4344-ab65-28006449c62b",
      "Name": "Deploy 2017 Installation Media",
      "PackageRequirement": "LetOctopusDecide",
      "Properties": {
        "Octopus.Action.TargetRoles": "sql-server-deploy-dbengine"
      },
      "Condition": "Success",
      "StartTrigger": "StartAfterPrevious",
      "Actions": [
        {
          "Id": "ed6e399a-86af-4449-b545-cb93e278a27b",
          "Name": "Deploy 2017 Installation Media",
          "ActionType": "Octopus.TentaclePackage",
          "IsDisabled": false,
          "CanBeUsedForProjectVersioning": true,
          "IsRequired": false,
          "WorkerPoolId": null,
          "Environments": [],
          "ExcludedEnvironments": [],
          "Channels": [],
          "TenantTags": [],
          "Packages": [
            {
              "Id": "c714e901-857f-4023-b3e0-cb13aefa40d1",
              "Name": "",
              "PackageId": "mssql-setup-2017",
              "FeedId": "feeds-builtin",
              "AcquisitionLocation": "Server",
              "Properties": {}
            }
          ],
          "Properties": {
            "Octopus.Action.EnabledFeatures": "Octopus.Features.CustomDirectory",
            "Octopus.Action.Package.CustomInstallationDirectory": "C:\\Source\\mssqlsetup",
            "Octopus.Action.Package.PackageId": "mssql-setup-2017",
            "Octopus.Action.Package.FeedId": "feeds-builtin",
            "Octopus.Action.Package.DownloadOnTentacle": "False"
          },
          "Links": {}
        }
      ]
    },
    {
      "Id": "1525057d-d2f4-4d6f-9014-a89d56a8c713",
      "Name": "Install SQL Server Default Instance",
      "PackageRequirement": "LetOctopusDecide",
      "Properties": {
        "Octopus.Action.TargetRoles": "sql-server-deploy-dbengine"
      },
      "Condition": "Success",
      "StartTrigger": "StartAfterPrevious",
      "Actions": [
        {
          "Id": "d75dbf44-fa02-4703-9eff-85ca44ed3331",
          "Name": "Install SQL Server Named Instance",
          "ActionType": "Octopus.Script",
          "IsDisabled": false,
          "CanBeUsedForProjectVersioning": false,
          "IsRequired": false,
          "WorkerPoolId": null,
          "Environments": [],
          "ExcludedEnvironments": [],
          "Channels": [],
          "TenantTags": [],
          "Packages": [],
          "Properties": {
            "Octopus.Action.RunOnServer": "false",
            "Octopus.Action.Script.ScriptSource": "Inline",
            "Octopus.Action.Script.Syntax": "PowerShell",
            "Octopus.Action.Script.ScriptBody": "[string[]]$SQLSysAdminAccounts = @('BNZNAG\\BNZ Tech - SQL DBA','NT AUTHORITY\\SYSTEM')\n[string]$InstallSQLDataDir = $SQLDirSystemData\n\nif ($InstallSQLDataDir.Length -lt 3 -and $InstallSQLDataDir[-1] -ne '\\') {\n    $InstallSQLDataDir = $InstallSQLDataDir + '\\\\'\n} \nelseif ($InstallSQLDataDir.Length -lt 4 -and $InstallSQLDataDir[-1] -eq '\\' -and $InstallSQLDataDir[-2] -ne '\\') {\n    $InstallSQLDataDir = $InstallSQLDataDir + '\\'\n}\n\n$SQLMajorVersion = (Get-Item -Path 'C:\\Source\\mssqlsetup\\setup.exe').VersionInfo.ProductVersion.Split('.')[0]\n\n$SqlSetupParams = @{\n    SourcePath            = 'C:\\Source\\mssqlsetup'\n    InstanceName          = $SQLInstanceName\n    Features              = $SQLDbEngineFeatures\n    SQLCollation          = $SQLCollation\n    SQLSysAdminAccounts   = $SQLSysAdminAccounts\n    InstallSharedDir      = 'C:\\Program Files\\Microsoft SQL Server'\n    InstallSharedWOWDir   = 'C:\\Program Files (x86)\\Microsoft SQL Server'\n    InstanceDir           = 'C:\\Program Files\\Microsoft SQL Server'\n    InstallSQLDataDir     = $InstallSQLDataDir\n    SQLUserDBDir          = (Join-Path $SQLDirUserDBData \"MSSQL$SQLMajorVersion.$SQLInstanceName\\MSSQL\\DATA\")\n    SQLUserDBLogDir       = (Join-Path $SQLDirUserDBLog  \"MSSQL$SQLMajorVersion.$SQLInstanceName\\MSSQL\\DATA\")\n    SQLTempDBDir          = (Join-Path $SQLDirTempDBData \"MSSQL$SQLMajorVersion.$SQLInstanceName\\MSSQL\\DATA\")\n    SQLTempDBLogDir       = (Join-Path $SQLDirTempDBLog \"MSSQL$SQLMajorVersion.$SQLInstanceName\\MSSQL\\DATA\")\n    SQLBackupDir          = (Join-Path $SQLDirBackup  \"MSSQL$SQLMajorVersion.$SQLInstanceName\\MSSQL\\DATA\")\n    UpdateEnabled         = 'True'\n    UpdateSource          = 'MU'\n    ForceReboot           = $false\n    BrowserSvcStartupType = 'Automatic'\n}\n\nif ($SQLMajorVersion) {\n    $Test = Invoke-DscResource -ModuleName 'SqlServerDsc' -Name SqlSetup -Property $SqlSetupParams -Method Test\n\n    if (!$Test) {\n        Write-Host 'Installing...'\n        Invoke-DscResource -ModuleName 'SqlServerDsc' -Name SqlSetup -Property $SqlSetupParams -Method Set -Verbose\n    } else {\n        Write-Host 'Skipping... SQL Instance already exists...'\n    } \n} else {\n    Write-Host 'Skipping... No setup.exe found...'\n}"
          },
          "Links": {}
        },
        {
          "Id": "3d69c5ea-49be-42ac-8478-f5810d38e5eb",
          "Name": "Install DAC Framework",
          "ActionType": "Octopus.TentaclePackage",
          "IsDisabled": false,
          "CanBeUsedForProjectVersioning": true,
          "IsRequired": false,
          "WorkerPoolId": null,
          "Environments": [],
          "ExcludedEnvironments": [],
          "Channels": [],
          "TenantTags": [],
          "Packages": [
            {
              "Id": "9a002f92-e5e9-4331-8d6a-c535db6f05bd",
              "Name": "",
              "PackageId": "mssql-DacFramework",
              "FeedId": "feeds-builtin",
              "AcquisitionLocation": "Server",
              "Properties": {}
            }
          ],
          "Properties": {
            "Octopus.Action.EnabledFeatures": "Octopus.Features.CustomDirectory,Octopus.Features.CustomScripts",
            "Octopus.Action.Package.CustomInstallationDirectory": "C:\\Source\\",
            "Octopus.Action.Package.PackageId": "mssql-DacFramework",
            "Octopus.Action.Package.FeedId": "feeds-builtin",
            "Octopus.Action.Package.DownloadOnTentacle": "False",
            "Octopus.Action.CustomScripts.PostDeploy.ps1": ".\\DacFramework.msi /passive /norestart\n\nif (-not ([System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\")).Contains(\"C:\\Program Files\\Microsoft SQL Server\\150\\DAC\\bin\")) {\n\tsetx /M path \"$env:path;C:\\Program Files\\Microsoft SQL Server\\150\\DAC\\bin\"$env:path\n}"
          },
          "Links": {}
        },
        {
          "Id": "d17aa0f4-9864-44b8-898d-06215ecc34e7",
          "Name": "Deploy DBAid Management DB",
          "ActionType": "Octopus.TentaclePackage",
          "IsDisabled": false,
          "CanBeUsedForProjectVersioning": true,
          "IsRequired": false,
          "WorkerPoolId": null,
          "Environments": [],
          "ExcludedEnvironments": [],
          "Channels": [],
          "TenantTags": [],
          "Packages": [
            {
              "Id": "10222a76-1787-4f48-afa2-1a918838838f",
              "Name": "",
              "PackageId": "mssql-dbaid-mgmt-database",
              "FeedId": "feeds-builtin",
              "AcquisitionLocation": "Server",
              "Properties": {}
            }
          ],
          "Properties": {
            "Octopus.Action.EnabledFeatures": "Octopus.Features.CustomDirectory,Octopus.Features.CustomScripts",
            "Octopus.Action.Package.CustomInstallationDirectory": "C:\\Source\\",
            "Octopus.Action.CustomScripts.PostDeploy.ps1": "$SQLServer = Join-Path $env:COMPUTERNAME $SQLInstanceName\n$PackageVersion = $OctopusParameters[\"Octopus.Action[Deploy DBAid Management DB].Package.NuGetPackageVersion\"]\n$DeployedVersion = Invoke-SqlCmd -ServerInstance $SQLServer -Query \"SELECT [type_version] FROM msdb.dbo.sysdac_instances WHERE [instance_name] = N'_dbaid' AND DB_ID(N'_dbaid') IS NOT NULL\"\n$Publish = $True\n\nWrite-Host \"SQL Server: $SQLServer\"\nWrite-Host \"Package Version: $PackageVersion\"\nWrite-Host \"Deployed Version: $DeployedVersion\"\n\nif ($DeployedVersion) {\n\tif ($DeployedVersion.type_version -eq $PackageVersion) {\n    \tWrite-Host \"Latest _dbaid database already deployed...\"\n        $Publish = $False\n    }\n}\n\nif ($Publish) {\n\tWrite-Host \"Publishing _dbaid database...\"\n    \n\t&\"C:\\Program Files\\Microsoft SQL Server\\150\\DAC\\bin\\SqlPackage.exe\" /Action:Publish `\n    \t/SourceFile:C:\\Source\\_dbaid.dacpac `\n        /TargetServerName:$SQLServer `\n        /TargetDatabaseName:_dbaid `\n        /Properties:RegisterDataTierApplication=True\n \n    $SA = (Invoke-SqlCmd -ServerInstance $SQLServer -Query \"SELECT [name] FROM sys.server_principals WHERE [sid] = 0x01\").name\n    $SQL = \"ALTER AUTHORIZATION ON DATABASE::[_dbaid] TO [$SA];\"\n    Invoke-SqlCmd -ServerInstance $SQLServer -Query $SQL\n}\n\n$SQL = \"EXEC msdb.dbo.sp_update_job @job_name=N'_dbaid_backup_system_full', @enabled=1;\nEXEC msdb.dbo.sp_update_job @job_name=N'_dbaid_backup_user_full', @enabled=1;\nEXEC msdb.dbo.sp_update_job @job_name=N'_dbaid_backup_user_tran', @enabled=1;\nEXEC msdb.dbo.sp_update_job @job_name=N'_dbaid_delete_system_history', @enabled=1;\nEXEC msdb.dbo.sp_update_job @job_name=N'_dbaid_index_optimise_system', @enabled=1;\nEXEC msdb.dbo.sp_update_job @job_name=N'_dbaid_index_optimise_user', @enabled=1;\nEXEC msdb.dbo.sp_update_job @job_name=N'_dbaid_integrity_check_system', @enabled=1;\nEXEC msdb.dbo.sp_update_job @job_name=N'_dbaid_integrity_check_user', @enabled=1;\nIF EXISTS (SELECT job_id FROM msdb.dbo.sysjobs_view WHERE name = N'_dbaid_config_genie')\n\tEXEC msdb.dbo.sp_delete_job @job_name=N'_dbaid_config_genie', @delete_unused_schedule=1;\"\n\nInvoke-SqlCmd -ServerInstance $SQLServer -Query $SQL\n",
            "Octopus.Action.Package.PackageId": "mssql-dbaid-mgmt-database",
            "Octopus.Action.Package.FeedId": "feeds-builtin",
            "Octopus.Action.Package.DownloadOnTentacle": "False",
            "Octopus.Action.CustomScripts.PreDeploy.ps1": "Start-Sleep -s 15"
          },
          "Links": {}
        },
        {
          "Id": "5c532316-dfa8-4070-ba0a-04b21a272431",
          "Name": "Security Hardening CIS Benchmark",
          "ActionType": "Octopus.Script",
          "IsDisabled": false,
          "CanBeUsedForProjectVersioning": false,
          "IsRequired": false,
          "WorkerPoolId": null,
          "Environments": [],
          "ExcludedEnvironments": [],
          "Channels": [],
          "TenantTags": [],
          "Packages": [],
          "Properties": {
            "Octopus.Action.RunOnServer": "false",
            "Octopus.Action.Script.ScriptSource": "Inline",
            "Octopus.Action.Script.Syntax": "PowerShell",
            "Octopus.Action.Script.ScriptBody": "$SQLServer = Join-Path $env:COMPUTERNAME $SQLInstanceName\n\n$SQL = \"USE [master]; \nIF EXISTS (SELECT [name] FROM sys.server_principals WHERE [name] = 'sa' AND [sid] = 0x01) \n\tALTER LOGIN [sa] WITH NAME = [sabnz];\"\n# Change sa login name\nInvoke-SqlCmd -ServerInstance $SQLServer -Query $SQL\n\n$SQL = \"USE [master];\nEXEC master.sys.xp_instance_regwrite N'HKEY_LOCAL_MACHINE', N'Software\\Microsoft\\MSSQLServer\\MSSQLServer', N'NumErrorLogs', REG_DWORD, 12\"\n# update error log config\nInvoke-SqlCmd -ServerInstance $SQLServer -Query $SQL\n\n$SQL = \"USE [master];\nIF NOT EXISTS (SELECT * FROM sys.server_audits WHERE name = N'SecurityAudit')\nCREATE SERVER AUDIT [SecurityAudit]\nTO APPLICATION_LOG\nWITH\n(\tQUEUE_DELAY = 1000\n\t,ON_FAILURE = CONTINUE\n)\nALTER SERVER AUDIT [SecurityAudit] WITH (STATE = ON)\nIF NOT EXISTS (SELECT * FROM sys.server_audit_specifications WHERE name = N'SecurityAuditSpecification')\nBEGIN\nCREATE SERVER AUDIT SPECIFICATION [SecurityAuditSpecification]\nFOR SERVER AUDIT [SecurityAudit]\nADD (AUDIT_CHANGE_GROUP),\nADD (FAILED_LOGIN_GROUP),\nADD (SUCCESSFUL_LOGIN_GROUP)\nWITH (STATE = ON)\nEND\nGO\"\n# Create login security audit\nInvoke-SqlCmd -ServerInstance $SQLServer -Query $SQL\n\n# If you drop sysadmin permissions then the project will fail if re-deployed\n#$SQL = \"ALTER SERVER ROLE [sysadmin] DROP MEMBER [NT AUTHORITY\\SYSTEM];\"\n#Invoke-SqlCmd -ServerInstance . -Query $SQL"
          },
          "Links": {}
        },
        {
          "Id": "1764f98f-95f7-4c1e-b40f-a14d44f55df9",
          "Name": "Configure SqlServerConfiguration (Requires Service Restart)",
          "ActionType": "Octopus.Script",
          "IsDisabled": false,
          "CanBeUsedForProjectVersioning": false,
          "IsRequired": false,
          "WorkerPoolId": null,
          "Environments": [],
          "ExcludedEnvironments": [],
          "Channels": [],
          "TenantTags": [],
          "Packages": [],
          "Properties": {
            "Octopus.Action.RunOnServer": "false",
            "Octopus.Action.Script.ScriptSource": "Inline",
            "Octopus.Action.Script.Syntax": "PowerShell",
            "Octopus.Action.Script.ScriptBody": "### NEXT CONFIG ###\n$Params = @{\n    ServerName     = $env:COMPUTERNAME\n    InstanceName   = $SQLInstanceName\n    OptionName     = 'remote admin connections'\n    OptionValue    = 1\n    RestartService = $false\n}\n\n$Test = Invoke-DscResource -ModuleName SqlServerDsc -Name SqlServerConfiguration -Property $Params -Method Test\n\nif (!$Test) {\n\tWrite-Host 'Configuring...'\n\tInvoke-DscResource -ModuleName SqlServerDsc -Name SqlServerConfiguration -Property $Params -Method Set -Verbose\n} \nelse {\n\tWrite-Host 'Skipping - Already Configured...'\n}\n\n### NEXT CONFIG ###\n$Params = @{\n    ServerName     = $env:COMPUTERNAME\n    InstanceName   = $SQLInstanceName\n    OptionName     = 'remote access'\n    OptionValue    = 0\n    RestartService = $true\n}\n\n$Test = Invoke-DscResource -ModuleName SqlServerDsc -Name SqlServerConfiguration -Property $Params -Method Test\n\nif (!$Test) {\n\tWrite-Host 'Configuring...'\n\tInvoke-DscResource -ModuleName SqlServerDsc -Name SqlServerConfiguration -Property $Params -Method Set -Verbose\n} \nelse {\n\tWrite-Host 'Skipping - Already Configured...'\n}\n"
          },
          "Links": {}
        },
        {
          "Id": "b8b6d152-57ca-4527-b378-8ad61c9b3456",
          "Name": "Configure SqlServerMemory",
          "ActionType": "Octopus.Script",
          "IsDisabled": false,
          "CanBeUsedForProjectVersioning": false,
          "IsRequired": false,
          "WorkerPoolId": null,
          "Environments": [],
          "ExcludedEnvironments": [],
          "Channels": [],
          "TenantTags": [],
          "Packages": [],
          "Properties": {
            "Octopus.Action.RunOnServer": "false",
            "Octopus.Action.Script.ScriptSource": "Inline",
            "Octopus.Action.Script.Syntax": "PowerShell",
            "Octopus.Action.Script.ScriptBody": "$Params = @{\n    Ensure       = 'Present'\n    DynamicAlloc = $true\n    ServerName   = $env:COMPUTERNAME\n    InstanceName = $SQLInstanceName\n    MinMemory    = 2048\n}\n\n$Test = Invoke-DscResource -ModuleName SqlServerDsc -Name SqlServerMemory -Property $Params -Method Test\n\nif (!$Test) {\n\tWrite-Host 'Configuring...'\n\tInvoke-DscResource -ModuleName SqlServerDsc -Name SqlServerMemory -Property $Params -Method Set -Verbose\n} \nelse {\n\tWrite-Host 'Skipping - Already Configured...'\n}"
          },
          "Links": {}
        },
        {
          "Id": "45ed3034-20a7-4432-8f2a-656fe4fc2656",
          "Name": "Configure SqlServerMaxDop",
          "ActionType": "Octopus.Script",
          "IsDisabled": false,
          "CanBeUsedForProjectVersioning": false,
          "IsRequired": false,
          "WorkerPoolId": null,
          "Environments": [],
          "ExcludedEnvironments": [],
          "Channels": [],
          "TenantTags": [],
          "Packages": [],
          "Properties": {
            "Octopus.Action.RunOnServer": "false",
            "Octopus.Action.Script.ScriptSource": "Inline",
            "Octopus.Action.Script.Syntax": "PowerShell",
            "Octopus.Action.Script.ScriptBody": "$Params = @{\n    Ensure                  = 'Present'\n    DynamicAlloc            = $true\n    ServerName              = $env:COMPUTERNAME\n    InstanceName            = $SQLInstanceName\n    ProcessOnlyOnActiveNode = $true\n}\n\n$Test = Invoke-DscResource -ModuleName SqlServerDsc -Name SqlServerMaxDop -Property $Params -Method Test\n\nif (!$Test) {\n\tWrite-Host 'Configuring...'\n\tInvoke-DscResource -ModuleName SqlServerDsc -Name SqlServerMaxDop -Property $Params -Method Set -Verbose\n} \nelse {\n\tWrite-Host 'Skipping - Already Configured...'\n}"
          },
          "Links": {}
        },
        {
          "Id": "53a67881-7eab-4668-ac5e-d769d662bd9f",
          "Name": "Configure SqlServerNetwork (Requires Service Restart)",
          "ActionType": "Octopus.Script",
          "IsDisabled": false,
          "CanBeUsedForProjectVersioning": false,
          "IsRequired": false,
          "WorkerPoolId": null,
          "Environments": [],
          "ExcludedEnvironments": [],
          "Channels": [],
          "TenantTags": [],
          "Packages": [],
          "Properties": {
            "Octopus.Action.RunOnServer": "false",
            "Octopus.Action.Script.ScriptSource": "Inline",
            "Octopus.Action.Script.Syntax": "PowerShell",
            "Octopus.Action.Script.ScriptBody": "$Params = @{\n    InstanceName    = $SQLInstanceName\n    ProtocolName    = 'Tcp'\n    IsEnabled       = $true\n    TCPDynamicPort  = $false\n    TCPPort         = '4309'\n    RestartService  = $true\n}\n\n$Test = Invoke-DscResource -ModuleName SqlServerDsc -Name SqlServerNetwork -Property $Params -Method Test\n\nif (!$Test) {\n\tWrite-Host 'Configuring...'\n\tInvoke-DscResource -ModuleName SqlServerDsc -Name SqlServerNetwork -Property $Params -Method Set -Verbose\n} \nelse {\n\tWrite-Host 'Skipping - Already Configured...'\n}"
          },
          "Links": {}
        },
        {
          "Id": "9d902e82-7363-499e-a599-1a22454eb319",
          "Name": "Add Firewall Rules",
          "ActionType": "Octopus.Script",
          "IsDisabled": false,
          "CanBeUsedForProjectVersioning": false,
          "IsRequired": false,
          "WorkerPoolId": null,
          "Environments": [],
          "ExcludedEnvironments": [],
          "Channels": [],
          "TenantTags": [],
          "Packages": [],
          "Properties": {
            "Octopus.Action.RunOnServer": "false",
            "Octopus.Action.Script.ScriptSource": "Inline",
            "Octopus.Action.Script.Syntax": "PowerShell",
            "Octopus.Action.Script.ScriptBody": "$TCPRuleName = \"SQL Server DBEngine - $SQLInstanceName (TCP-In)\"\n$TCPPorts = '4309', '1434'\n$UDPRuleName = \"SQL Server Browser (UDP-In)\"\n$UDPPorts = '1434'\n\nif (Get-NetFirewallRule –DisplayName $TCPRuleName)\n{\n    Write-Host \"Firewall rule for '$TCPRuleName' already exists...\"\n}\nelse\n{\n    New-NetFirewallRule -DisplayName $TCPRuleName -Direction Inbound -Profile Domain -Action Allow -Protocol TCP -LocalPort $TCPPorts -RemoteAddress Any\n    write-host \"Firewall rule for '$TCPRuleName' on port '$TCPPorts' created successfully\"\n}\n\nif (Get-NetFirewallRule –DisplayName $UDPRuleName)\n{\n    Write-Host \"Firewall rule for '$UDPRuleName' already exists...\"\n}\nelse\n{\n    New-NetFirewallRule -DisplayName $UDPRuleName -Direction Inbound -Profile Domain -Action Allow -Protocol UDP -LocalPort $UDPPorts -RemoteAddress Any\n    write-host \"Firewall rule for '$UDPRuleName' on port '$UDPPorts' created successfully\"\n}"
          },
          "Links": {}
        }
      ]
    },
    {
      "Id": "eb6c2452-2734-4086-af41-2bc29122f232",
      "Name": "Install SSMS",
      "PackageRequirement": "LetOctopusDecide",
      "Properties": {
        "Octopus.Action.TargetRoles": "sql-server-deploy-dbengine"
      },
      "Condition": "Success",
      "StartTrigger": "StartAfterPrevious",
      "Actions": [
        {
          "Id": "ef80b83f-5b3c-4b27-963a-fbdcfca30d31",
          "Name": "Install SSMS",
          "ActionType": "Octopus.TentaclePackage",
          "IsDisabled": false,
          "CanBeUsedForProjectVersioning": true,
          "IsRequired": false,
          "WorkerPoolId": null,
          "Environments": [],
          "ExcludedEnvironments": [],
          "Channels": [],
          "TenantTags": [],
          "Packages": [
            {
              "Id": "0e691b79-0f9e-4874-85e1-b6419d1665a9",
              "Name": "",
              "PackageId": "mssql-SSMS-Setup-ENU",
              "FeedId": "feeds-builtin",
              "AcquisitionLocation": "Server",
              "Properties": {}
            }
          ],
          "Properties": {
            "Octopus.Action.EnabledFeatures": "Octopus.Features.CustomDirectory,Octopus.Features.CustomScripts",
            "Octopus.Action.CustomScripts.PostDeploy.ps1": "$SSMSParams = @{\n    Name      = 'SSMS-Setup-ENU'\n    Ensure    = 'Present'\n    Path      = 'C:\\Source\\SSMS-Setup-ENU.exe'\n    Arguments = '/install /passive /norestart'\n    ProductId = 'EA662F15-4E3A-4DB7-8D41-A2E5B01D90FE' # To find ProductId, install product and query WMI # Get-WmiObject -Query \"SELECT * FROM Win32_Product WHERE Name='SQL Server Management Studio'\"\n}\n\n$testSSMS = Invoke-DscResource -ModuleName 'PSDesiredStateConfiguration' -Name Package -Property $SSMSParams -Method Test\n\nif (!$testSSMS) {\n\tWrite-Host 'Installing(SSMS)...'\n\tInvoke-DscResource -ModuleName 'PSDesiredStateConfiguration' -Name Package -Property $SSMSParams -Method Set -Verbose\n} else {\n\tWrite-Host 'Skipping(SSMS)... Package already installed.'\n}",
            "Octopus.Action.Package.PackageId": "mssql-SSMS-Setup-ENU",
            "Octopus.Action.Package.FeedId": "feeds-builtin",
            "Octopus.Action.Package.DownloadOnTentacle": "False",
            "Octopus.Action.Package.CustomInstallationDirectory": "C:\\Source\\"
          },
          "Links": {}
        }
      ]
    }
  ],
  "Version": 160,
  "LastSnapshotId": null,
  "Links": {
    "Self": "/api/deploymentprocesses/deploymentprocess-Projects-546",
    "Project": "/api/projects/Projects-546",
    "Template": "/api/deploymentprocesses/deploymentprocess-Projects-546/template{?channel,releaseId}"
  }
}
